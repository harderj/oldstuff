// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   Not (in=zx, out=Notzx);
   To16 (in=Notzx, out=Notzx16);
   And16 (a=x, b[0..15]=Notzx16, out=xz);
   To16 (in=nx, out=nx16);
   Xor16 (a=xz, b[0..15]=nx16, out=xn);
   Not (in=zy, out=Notzy);
   To16 (in=Notzy, out=Notzy16);
   And16 (a=y, b[0..15]=Notzy16, out=yz);
   To16 (in=ny, out=ny16);
   Xor16 (a=yz, b[0..15]=ny16, out=yn);
   Add16 (a=xn, b=yn, out=xpy);
   And16 (a=xn, b=yn, out=xny);
   To16 (in=f, out=f16);
   And16 (a=xpy, b[0..15]=f16, out=r1);
   Not (in=f, out=Notf);
   To16 (in=Notf, out=Notf16);
   And16 (a=xny, b[0..15]=Notf16, out=r2);
   Add16 (a=r1, b=r2, out=almost);
   Not16 (in=almost, out=Notalmost);
   Not (in=no, out=Notno);
   To16 (in=Notno, out=Notno16);
   And16 (a=almost, b[0..15]=Notno16, out=normal);
   To16 (in=no, out=no16);
   And16 (a=Notalmost, b[0..15]=no16, out=negated);
   Add16 (a=normal, b=negated, out=outSoon);
   Not16 (in=outSoon, out=NotoutSoon);
   And16Way (in=NotoutSoon, out=zr);
   Id16 (in=outSoon, out[0..14]=g, out[15]=ng);
   Id16 (in=outSoon, out=out);
}